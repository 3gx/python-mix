def factorial(n):
    """Compute n! where n is an interger >= 0."""
    if n `isinstance` int and n>=0:
        acc = 1
        for x in range(1, n+1):
            acc *= x
        return acc
    else:
        raise TypeError("the argument to factorial must be an integer >=0")

# test cases
#-1 |> factorial |> print
#0.5 |> factorial |> print
0 |> factorial |> print
3 |> factorial |> print

def add(a,b):
    return a+b

3 `add` 4 |> print

print("---matching---")

def factorial(n):
    case n:
        match 0:
            return 1
        match x is int if x > 0:
            return x * factorial(x-1)
    else:
        raise TypeError("invalid")

# test cases
#-1 |> factorial |> print
#0.5 |> factorial |> print
0 |> factorial |> print
3 |> factorial |> print

print("---tail-call---")

def factorial(n, acc=1):
    """Compute n! where n is an integer >= 0."""
    case n:
        match 0:
            return acc
        match _ is int if n > 0:
            return factorial(n-1, acc*n)
    else:
        raise TypeError("the argument to factorial must be an integer >= 0")

# Test cases:
#-1 |> factorial |> print  # TypeError
#0.5 |> factorial |> print  # TypeError
0 |> factorial |> print  # 1
3 |> factorial |> print  # 6

print( "--- patterns --")

def fac(0) = 1
addpattern def fac(n is int if n > 0):
    return n * fac(n-1)
def fac1(0) = 1
addpattern def fac1(n is int if n > 0) = fac1(n-1)

# Test cases:
#-1 |> fac |> print  # MatchError
#0.5 |> fac |> print  # MatchError
0 |> fac1 |> print  # 1
3 |> fac1 |> print  # 6

