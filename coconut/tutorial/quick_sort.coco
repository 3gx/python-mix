
def quick_sort([]) = []

@addpattern(quick_sort)
def quick_sort([head] + tail) =
    """Sort the input sequence using the quick sort algorithm."""
    quick_sort(left) + [head] + quick_sort(right) where:
        left = [x for x in tail if x < head]
        right = [x for x in tail if x >= head]

# Test cases:
[] |> quick_sort |> print  # []
[3] |> quick_sort |> print  # [3]
[0,1,2,3,4] |> quick_sort |> print  # [0,1,2,3,4]
[4,3,2,1,0] |> quick_sort |> print  # [0,1,2,3,4]
[3,0,4,2,1] |> quick_sort |> print  # [0,1,2,3,4]

print ("--sort match--")

def quick_sort1(l):
    """Sort the input iterator using the quick sort algorithm."""
    match [head] :: tail in l:
        tail = reiterable(tail)
        yield from quick_sort1(left) :: [head] :: quick_sort1(right) where:
            left = (x for x in tail if x < head)
            right = (x for x in tail if x >= head)
    # By yielding nothing if the match falls through, we implicitly return an empty iterator.

# Test cases:
[] |> quick_sort1 |> list |> print  # []
[3] |> quick_sort1 |> list |> print  # [3]
[0,1,2,3,4] |> quick_sort1 |> list |> print  # [0,1,2,3,4]
[4,3,2,1,0] |> quick_sort1 |> list |> print  # [0,1,2,3,4]
[3,0,4,2,1] |> quick_sort1 |> list |> print  # [0,1,2,3,4]
