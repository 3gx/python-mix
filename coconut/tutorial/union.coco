from typing import Union
from typeguard import typechecked

Tree = Union["Empty", "Leaf", "Node"]
data Empty()
data Leaf(n)
data Node(l, r)
data Fun(n)

def depth(Empty()) = 0

@addpattern(depth)
def depth(Leaf(n)) = 1

@addpattern(depth)
def depth(Node(l, r)) = 1 + max([depth(l), depth(r)])

Empty() |> depth |> print
Leaf(5) |> depth |> print
Node(Leaf(2), Node(Empty(), Leaf(3))) |> depth |> print

@typechecked
def depth1(t : Tree) -> int:
    case t:
        match Empty():
            return 0
        match Leaf(_):
            return 1
        match Node(l,r):
            return depth1(l) + depth1(r)
        match _:
            raise TypeError(f"Invalid type {type(t)}")

print("--")

Empty() |> depth1 |> print
Leaf(5) |> depth1 |> print
Node(Leaf(2), Node(Empty(), Leaf(3))) |> depth1 |> print
#Fun(3) |> depth1

print("--")

data S(i:int)
data T(f:float)
ST = Union[S,T]



def fun(S(n), i is str):
    print(f"{i}= {n}")
addpattern def fun(T(n), i is str):
    print(f"{i}= {n}")


fun(S(3), "3")
fun(T(4.3), "4.3")
#fun(T(4.3), 4.3) # fails
